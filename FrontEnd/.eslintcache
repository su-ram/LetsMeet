[{"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\index.js":"1","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\App.js":"2","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\reportWebVitals.js":"3","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\index.js":"4","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\Main.js":"5","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\CreatePlan.js":"6","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\ManagePlan.js":"7","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\index.js":"8","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Yookha.js":"9","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Top3.js":"10","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Comment.js":"11","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\TimeTable.js":"12","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Header.js":"13","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Commentitem.js":"14","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\function\\getString.js":"15","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\function\\timeTableFunc.js":"16"},{"size":517,"mtime":1609264321778,"results":"17","hashOfConfig":"18"},{"size":209,"mtime":1609264321775,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1609264321780,"results":"20","hashOfConfig":"18"},{"size":145,"mtime":1609264321779,"results":"21","hashOfConfig":"18"},{"size":350,"mtime":1609264321779,"results":"22","hashOfConfig":"18"},{"size":4888,"mtime":1610135117174,"results":"23","hashOfConfig":"18"},{"size":2676,"mtime":1610724553676,"results":"24","hashOfConfig":"18"},{"size":227,"mtime":1610724565745,"results":"25","hashOfConfig":"18"},{"size":2383,"mtime":1610724754564,"results":"26","hashOfConfig":"18"},{"size":1485,"mtime":1610724726179,"results":"27","hashOfConfig":"18"},{"size":1387,"mtime":1610724711124,"results":"28","hashOfConfig":"18"},{"size":7822,"mtime":1610721958836,"results":"29","hashOfConfig":"18"},{"size":366,"mtime":1609264321776,"results":"30","hashOfConfig":"18"},{"size":387,"mtime":1610135562645,"results":"31","hashOfConfig":"18"},{"size":1066,"mtime":1609264321777,"results":"32","hashOfConfig":"18"},{"size":4105,"mtime":1610721958837,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1yjxj01",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"36"},"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\index.js",[],["74","75"],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\App.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\reportWebVitals.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\index.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\Main.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\CreatePlan.js",["76","77","78"],"import * as React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { Header } from \"../components\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport \"react-date-range/dist/styles.css\";\r\nimport \"react-date-range/dist/theme/default.css\";\r\nimport { DateRange } from \"react-date-range\";\r\n\r\nexport default class CreatePlan extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      planName: \"\",\r\n      startTime: \"\",\r\n      finishTime: \"\",\r\n      timeInterval: \"\",\r\n      startDate: new Date(),\r\n      endDate: new Date(),\r\n      key: \"selection\",\r\n    };\r\n  }\r\n\r\n  onRangeChange = (ranges) => {\r\n    console.log(ranges);\r\n    this.setState({\r\n      startDate: ranges[\"selection\"].startDate,\r\n      endDate: ranges[\"selection\"].endDate,\r\n      key: ranges[\"selection\"].key,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { data, planName, startTime, finishTime, timeInterval } = this.state;\r\n    //시간 배열\r\n    const Times = new Array();\r\n    for (let i = 1; i < 12; i++) {\r\n      Times.push(i);\r\n    }\r\n    const amTimeList = Times.map((amTime) => (\r\n      <option value={amTime}>오전{amTime}시</option>\r\n    ));\r\n    const pmTimeList = Times.map((pmTime) => (\r\n      <option value={pmTime + 12}>오후{pmTime}시</option>\r\n    ));\r\n\r\n    return (\r\n      <Grid className=\"create-cont\">\r\n        <Header />\r\n        <Grid className=\"create-cont-title\">\r\n          <h2>언제가 좋을까요?🤔</h2>\r\n        </Grid>\r\n        <Grid className=\"setting\">\r\n          {/* 캘린더 */}\r\n          <DateRange\r\n            className=\"create-calendar\"\r\n            editableDateInputs={true}\r\n            onChange={this.onRangeChange}\r\n            moveRangeOnFirstSelection={false}\r\n            ranges={[this.state]}\r\n          />\r\n          <Grid className=\"create-cont-setting2\">\r\n            {/* 일정이름 */}\r\n            <input\r\n              className=\"create-name\"\r\n              type=\"text\"\r\n              value={planName}\r\n              onChange={(e) => {\r\n                this.setState({ planName: e.target.value });\r\n              }}\r\n              placeholder=\"일정 이름을 작성해주세요.\"\r\n            />\r\n            {/* 시간 정하기 */}\r\n            <Grid className=\"create-time\">\r\n              <FormControl className=\"create-time-start\">\r\n                {/* <InputLabel className=\"timeText\">Start Time</InputLabel> */}\r\n                <NativeSelect\r\n                  id=\"startTime\"\r\n                  value={startTime}\r\n                  onChange={(e) => {\r\n                    this.setState({ startTime: e.target.value });\r\n                  }}\r\n                >\r\n                  <option aria-label=\"None\" value=\"\">\r\n                    시작시간\r\n                  </option>\r\n                  <option value=\"0\">오전0시</option>\r\n                  {amTimeList}\r\n                  {pmTimeList}\r\n                </NativeSelect>\r\n              </FormControl>\r\n              <Grid>~</Grid>\r\n              <FormControl className=\"create-time-finish\">\r\n                {/* <InputLabel className=\"timeText\">Finish Time</InputLabel> */}\r\n                <NativeSelect\r\n                  id=\"finishTime\"\r\n                  value={finishTime}\r\n                  onChange={(e) => {\r\n                    this.setState({ finishTime: e.target.value });\r\n                  }}\r\n                >\r\n                  <option aria-label=\"None\" value=\"\">\r\n                    끝시간\r\n                  </option>\r\n                  {amTimeList}\r\n                  <option value=\"12\">오후12시</option>\r\n                  {pmTimeList}\r\n                </NativeSelect>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid className=\"create-interval\">\r\n              <FormControl>\r\n                {/* <InputLabel className=\"timeText\">Interval</InputLabel> */}\r\n                <NativeSelect\r\n                  id=\"timeInterval\"\r\n                  value={timeInterval}\r\n                  onChange={(e) => {\r\n                    this.setState({ timeInterval: e.target.value });\r\n                  }}\r\n                >\r\n                  <option aria-label=\"None\" value=\"\">\r\n                    단위\r\n                  </option>\r\n                  <option value={15}>15분</option>\r\n                  <option value={30}>30분</option>\r\n                  <option value={60}>1시간</option>\r\n                </NativeSelect>\r\n              </FormControl>\r\n              <Grid>&nbsp;&nbsp;단위</Grid>\r\n            </Grid>\r\n            {/* 일정생성 버튼 */}\r\n            <Grid className=\"create-plan-btn\">\r\n              <a href=\"#\" className=\"create-plan-text\">\r\n                일정 생성하기\r\n              </a>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\ManagePlan.js",["79","80","81","82"],"import React, { useState } from \"react\";\r\nimport { Header, TimeTable, Comment, Yookha, Top3} from \"../components\";\r\nimport { Grid } from '@material-ui/core'\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\nimport axios from 'axios';\r\n\r\nconst getData = (url) => {\r\n\t// 원래 url을 이용해서 해당 정보 받아오기\r\n\treturn ({\r\n\t\t\"title\" : \"비주얼 팀 회의\",\r\n\t\t\"dates\" : [\r\n\t\t\tnew Date(\"2020/12/14\"),\r\n\t\t\tnew Date(\"2020/12/15\"),\r\n\t\t\tnew Date(\"2020/12/16\"),\r\n\t\t\tnew Date(\"2020/12/17\"),\r\n\t\t\tnew Date(\"2020/12/18\"),\r\n\t\t\tnew Date(\"2020/12/19\"),\r\n\t\t\tnew Date(\"2020/12/20\"),\r\n\t\t\tnew Date(\"2020/12/21\"),\r\n\t\t\tnew Date(\"2020/12/22\"),\r\n\t\t],\r\n\t\t\"gap\" : 30,\r\n\t\t\"start\" : \"10:00\",\r\n\t\t\"end\" : \"23:50\"\r\n\t})\r\n}\r\n\r\nconst ManagePlan = ({match}) => {\r\n\tconst [data, setData] = useState(getData(match.url));\r\n\tconst [isloggedin, setloggedin] = useState(true);\r\n\tconst [logininput, setlogininput] = useState({\r\n\t\tid: '',\r\n\t\tpw: '',\r\n\t  });\r\n\tconst { id, pw } = logininput;\r\n\tconst onChange = (e) => {\r\n\t\tconst { value, name } = e.target;\r\n\t\tsetlogininput({\r\n\t  ...logininput,\r\n\t  [name]: value\r\n\t});\r\n\t  };\r\n\treturn (\r\n\t\t<Grid container direction=\"column\" className=\"Manage-page-con\">\r\n\t\t\t<Header />\r\n\t\t\t<Grid className=\"Manage-plan-title\"><AccessAlarmIcon fontSize=\"large\"/><h2>{data.title}</h2></Grid>\t\r\n\t\t\t{data?\r\n\t\t\t\t<Grid container direction=\"row\" className=\"Manage-contents-con\">\r\n\t\t\t\t\t{isloggedin ? <TimeTable \r\n\t\t\t\t\t\tdata = {data}\r\n\t\t\t\t\t\ttype = \"mine\"\r\n\t\t\t\t\t/>: <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n\t\t\t\t\t\t\t<div className=\"login-flex-container\">\r\n\t\t\t\t\t\t\t\t<text className=\"title\"><img className=\"img\" src=\"/img/alarm.png\"></img>    비주얼팀 디자인 회의</text>\r\n\t\t\t\t\t\t\t\t\t<br/><br/>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<text className=\"nickname\">닉네임 : </text>\r\n\t\t\t\t\t\t\t\t\t<input className=\"logininput\" name=\"id\" onChange={onChange} value={id} />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<br></br>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<text className=\"nickname\">비밀번호 : </text>\r\n\t\t\t\t\t\t\t\t\t<input className=\"logininput\" name=\"pw\" onChange={onChange} value={pw} />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<br></br>\r\n\t\t\t\t\t\t\t\t\t<text className=\"notice\">*닉네임과 비밀번호는 현재 일정에만 사용됩니다.</text>\r\n\t\t\t\t\t\t\t\t\t<br></br>\r\n\t\t\t\t\t\t\t\t\t<button className=\"btn\">로그인</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>}\r\n\t\t\t\t\t<TimeTable \r\n\t\t\t\t\t\tdata = {data}\r\n\t\t\t\t\t\ttype = \"team\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n\t\t\t\t\t\t<Top3></Top3>\r\n\t\t\t\t\t\t<Yookha></Yookha>\r\n\t\t\t\t\t\t<Comment></Comment>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t:undefined\r\n\t\t\t}\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\n/*\r\n\r\n*/\r\nexport default ManagePlan;\r\n","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\index.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Yookha.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Top3.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Comment.js",["83"],"import React, { useState } from 'react';\r\nimport Commentitem from './Commentitem';\r\n\r\nconst Comment = () => {\r\n    const users = [\r\n        {\r\n        'id': 1,\r\n        'name': '미현',\r\n        'description': '디자인회의 하나씩 말씀해주세요',\r\n        },\r\n        {\r\n        'id': 2,\r\n        'name': '소정',\r\n        'description': '넴 알겠습니다',\r\n        },\r\n        {\r\n        'id': 3,\r\n        'name': '수람',\r\n        'description': '저희 시간 얼추 맞네요',\r\n        },\r\n        {\r\n        'id': 4,\r\n        'name': '영주',\r\n        'description': '그러게요 다행이네요',\r\n        },\r\n        ]\r\n    return(\r\n        <div>\r\n    <text className=\"title\">댓글 <img className=\"img\" src=\"/img/comment.png\" alt=\"comment\"></img></text>\r\n    <div className=\"commentbox\">\r\n    <br/>\r\n    <table className=\"table\">\r\n        <tbody>\r\n        {users.map(user => {\r\n        return <Commentitem key={user.id} id={user.id} name={user.name} description={user.description} />\r\n        })}\r\n        </tbody>\r\n    </table>\r\n    <br/>\r\n    <input className=\"commentinput\" placeholder=\"로그인 후 댓글을 적어주세요\">\r\n    </input>\r\n    </div>\r\n    <br></br>\r\n    <button className=\"sharebtn\">링크 복사하기</button>\r\n    <button className=\"sharebtn\">카카오톡 공유하기</button>\r\n    \r\n    </div>\r\n    );\r\n}\r\nexport default Comment;","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\TimeTable.js",["84","85"],"import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\n\r\nimport { getMonthDate, getDay, getTimeString } from '../function/getString';\r\nimport { getBool, showDragResult, initializeStill, stillDragging } from '../function/timeTableFunc';\r\n\r\nimport { Grid } from '@material-ui/core';\r\nimport { Table, TableBody, TableContainer, TableHead, TableRow, TableCell, Typography } from '@material-ui/core';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\n\r\nconst TimeTable = (props) => {\r\n\tconst cellNum = 5;\r\n\tconst [timeString, setTS] = useState([]);\r\n\tconst [cellWidth, setCW] = useState([]);\r\n\tconst [nowCell, setNC] = useState(cellNum-1); // 모바일에서 5개 보여주기\r\n\r\n\tconst [update, forceUpdate] = useState(true);\r\n\tconst [dragging, setDragging] = useState(false);\r\n\tconst [dragPos, setDP] = useState({\"start\":[-1, -1], \"end\":[-1, -1]});\r\n\tconst [dragState, setDS] = useState(false);\r\n\r\n\tuseEffect(()=>{\r\n\t\tsetTS(getTimeString(props.data.start, props.data.end, props.data.gap));\r\n\t}, [props])\r\n\r\n\tuseEffect(()=>{\r\n\t\tlet tmp = [];\r\n\t\tfor(let i=0; i<props.data.dates.length; i++)\r\n\t\t\ttmp.push(0);\r\n\t\tsetCW(tmp);\r\n\t}, [props.dates])\r\n\r\n\tconst removeCell = (num) => {\r\n\t\tconst cell = document.getElementsByClassName('cell'+num);\r\n\t\tfor(let c of cell){\r\n\t\t\tc.classList.add(\"unvisible\");\r\n\t\t\tc.classList.remove(\"visible\");\r\n\t\t}\r\n\t}\r\n\r\n\tconst addCell = (num) => {\r\n\t\tconst cell = document.getElementsByClassName('cell'+num);\r\n\t\tfor(let c of cell){\r\n\t\t\tc.classList.add(\"visible\");\r\n\t\t\tc.classList.remove(\"unvisible\");\r\n\t\t}\r\n\t}\r\n\r\n\tconst prevCell = () => {\r\n\t\tremoveCell(nowCell);\r\n\t\taddCell(nowCell-cellNum);\r\n\t\tsetNC(nowCell-1);\r\n\t}\r\n\r\n\tconst nextCell = () => {\r\n\t\tremoveCell(nowCell-cellNum+1);\r\n\t\taddCell(nowCell+1);\r\n\t\tsetNC(nowCell+1);\r\n\t}\r\n\r\n\tconst startDrag = async (e) => {\r\n\t\tconst rw = e.target.id.split(\"/\");\r\n\t\tawait setDragging(true);\r\n\t\tawait setDP({\"start\": [rw[1], rw[2]], \"end\": [rw[1], rw[2]]});\r\n\t\tawait setDS(getBool(\"rc/\"+rw[1]+\"/\"+rw[2]));\r\n\r\n\t\tforceUpdate(!update);\r\n\t}\r\n\r\n\tconst stillDrag = async (e) => {\r\n\t\tif(!dragging) // drag 중이 아니면\r\n\t\t\treturn;\r\n\t\tif(e.target === undefined)\r\n\t\t\treturn;\r\n\t\tconst rw = e.target.id.split(\"/\");\r\n\t\tawait stillDragging(dragState, dragPos.start, dragPos.end, [rw[1], rw[2]]);\r\n\t\tawait setDP({...dragPos, \"end\":[rw[1], rw[2]]});\r\n\r\n\t\tforceUpdate(!update);\r\n\t}\r\n\r\n\tconst endDrag = async (e) => {\r\n\t\tconst rw = e.target.id.split(\"/\");\r\n\t\tawait setDragging(false);\r\n\t\tawait showDragResult(dragState, true, dragPos.start, [rw[1], rw[2]]);\r\n\t\tawait initializeStill(dragPos.start);\r\n\t\tawait setDP({\"start\":[-1, -1], \"end\":[-1, -1]}); // position 초기화\r\n\t\tconsole.log(\"enddrag\");\r\n\r\n\t\tforceUpdate(!update);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid className=\"timetable\">\r\n\t\t\t<Grid className=\"timetable-title\"><h2>{props.type===\"mine\"?\"▶ 나의 가능 시간\":\"▶ 전체 가능 시간\"}</h2></Grid>\r\n\t\t\t<Grid className=\"timetable-with-arrow\">\r\n\t\t\t\t{nowCell>4?<ArrowBackIosIcon onClick={prevCell} className=\"prev-btn\"/>:undefined}\r\n\t\t\t\t<TableContainer className=\"timetable-table-con\">\r\n\t\t\t\t\t<Table className=\"timetable-table\">\r\n\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t<TableRow className=\"timetable-date\">\r\n\t\t\t\t\t\t\t\t<TableCell className=\"blank date timetable-time-string\"><Grid>____</Grid></TableCell>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tprops.data.dates.map((date, index) => {\r\n\t\t\t\t\t\t\t\t\t\tlet clsName = index<cellNum?\"visible\":\"unvisible\";\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell className={clsx(\"date\",\"cell\"+index,clsName)} align=\"center\" key={index}>{getMonthDate(date)}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t<TableRow className=\"timetable-day\">\r\n\t\t\t\t\t\t\t\t<TableCell className=\"blank day timetable-time-string\"><Grid>____</Grid></TableCell>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tprops.data.dates.map((date, index) => {\r\n\t\t\t\t\t\t\t\t\t\tlet clsName = index<cellNum?\"visible\":\"unvisible\";\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell className={clsx(\"day\",\"cell\"+index,clsName)} align=\"center\" key={index}>{getDay(date)}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t{timeString.length!==0?\r\n\t\t\t\t\t\t\t\ttimeString.map((t, index) =>{\r\n\t\t\t\t\t\t\t\t\t// 첫시작과 분단위가 같거나 마지막 시간인지 확인\r\n\t\t\t\t\t\t\t\t\tconst last = index===timeString.length-1;\r\n\t\t\t\t\t\t\t\t\tconst bool = t.substring(3,5)===props.data.start.substring(3,5) || last;\r\n\t\t\t\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t\t\t\t<TableRow key={index} className=\"timetable-time\">\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell className=\"timetable-time-string\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Grid>{ bool? t:undefined }</Grid>\r\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tlast? // 마지막 셀은 출력 x\r\n\t\t\t\t\t\t\t\t\t\t\tundefined:\r\n\t\t\t\t\t\t\t\t\t\t\tcellWidth.map((_, index2) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet clsName = props.type===\"mine\"?\"table-body-mine\":\"table-body-team\";\r\n\t\t\t\t\t\t\t\t\t\t\t\tclsName += index2<cellNum?\" visible\":\" unvisible\";\r\n\t\t\t\t\t\t\t\t\t\t\t\tclsName += bool?\" midterm\":\" fullterm\";\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={\"\"+index+index2} id={\"rc/\"+index+\"/\"+index2} className={clsx(\"not-selected\",\"cell\"+index2, clsName)}></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}):undefined\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t</Table>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprops.type===\"mine\"?\r\n\t\t\t\t\t\t<Table className=\"still-table\">\r\n\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t<TableRow className=\"timetable-date\">\r\n\t\t\t\t\t\t\t\t\t<TableCell className=\"blank date timetable-time-string\"><Grid>&nbsp;&nbsp;&nbsp;</Grid></TableCell>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tprops.data.dates.map((date, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\tlet clsName = index<cellNum?\"visible\":\"unvisible\";\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell className={clsx(\"date\",\"cell\"+index,clsName)} align=\"center\" key={index}>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t<TableRow className=\"timetable-day\">\r\n\t\t\t\t\t\t\t\t\t<TableCell className=\"blank day timetable-time-string\"><Grid>____</Grid></TableCell>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tprops.data.dates.map((date, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\tlet clsName = index<cellNum?\"visible\":\"unvisible\";\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell className={clsx(\"day\",\"cell\"+index,clsName)} align=\"center\" key={index}>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t{timeString.length!==0?\r\n\t\t\t\t\t\t\t\t\ttimeString.map((t, index) =>{\r\n\t\t\t\t\t\t\t\t\t\t// 첫시작과 분단위가 같거나 마지막 시간인지 확인\r\n\t\t\t\t\t\t\t\t\t\tconst last = index===timeString.length-1;\r\n\t\t\t\t\t\t\t\t\t\tconst bool = t.substring(3,5)===props.data.start.substring(3,5) || last;\r\n\t\t\t\t\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t\t\t\t\t<TableRow key={index} className=\"timetable-time\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell className=\"timetable-time-string\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Grid>{ bool? t:undefined }</Grid>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tlast? // 마지막 셀은 출력 x\r\n\t\t\t\t\t\t\t\t\t\t\t\tundefined:\r\n\t\t\t\t\t\t\t\t\t\t\t\tcellWidth.map((_, index2) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet clsName = \"still-body-mine\";\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclsName += index2<cellNum?\" visible\":\" unvisible\";\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={\"\"+index+index2} id={\"stillrc/\"+index+\"/\"+index2} onMouseDown={startDrag} onMouseUp={endDrag} onMouseOver={stillDrag} className={clsx(\"cell\"+index2, clsName)}></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t}):undefined\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t</Table> : undefined}\r\n\t\t\t\t</TableContainer>\r\n\t\t\t\t{nowCell<cellWidth.length-1?<ArrowForwardIosIcon onClick={nextCell} className=\"next-btn\"/>:undefined}\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t)\r\n}\r\n\r\nexport default TimeTable;","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Header.js",["86"],"import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nconst Header = () => (\r\n  <Grid className=\"header-rule\">\r\n    <Grid className=\"header-logo\">\r\n      <img src=\"/img/letsmeet.png\" alt=\"logo\" />\r\n    </Grid>\r\n    <Grid className=\"goto-manual\">\r\n      <a href=\"#\">사용법 바로가기</a>\r\n    </Grid>\r\n  </Grid>\r\n);\r\n\r\nexport default Header;\r\n","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Commentitem.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\function\\getString.js",[],["87","88"],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\function\\timeTableFunc.js",["89","90","91"],"// 해당 id의 node가 selected 상태인지를 return\r\nexport const getBool = (str) => {\r\n\tconst first_cell = document.getElementById(str);\r\n\tif(first_cell===null)\r\n\t\treturn null;\r\n\tif(first_cell.classList.contains(\"not-selected\")){\r\n\t\tconsole.log(\"false\");\r\n\t\treturn false;\r\n\t}\r\n\tconsole.log(\"true\");\r\n\treturn true;\r\n}\r\n\r\nconst setStartAhead = (start, end) => {\r\n\tlet s = [Number(start[0]), Number(start[1])];\r\n\tlet e = [Number(end[0]), Number(end[1])];\r\n\r\n\tif(s[0] > e[0]){\r\n\t\tlet tmp = s[0];\r\n\t\ts[0]= e[0];\r\n\t\te[0] = tmp;\r\n\t}\r\n\tif(s[1] > e[1]){\r\n\t\tlet tmp = s[1];\r\n\t\ts[1]= e[1];\r\n\t\te[1] = tmp;\r\n\t}\r\n\treturn [s, e];\r\n}\r\n\r\nlet max_row = 0;\r\nlet max_col = 0;\r\n\r\nexport const initializeStill = async (start) => {\r\n\t// still table 초기화\r\n\tconst [startStill, endStill] = await setStartAhead(start, [max_row, max_col]);\r\n\r\n\tfor(let i=startStill[0]; i<=endStill[0]; i++){\r\n\t\tfor(let j=startStill[1]; j<=endStill[1]; j++){\r\n\t\t\tconst className = \"stillrc\"+\"/\"+i+\"/\"+j;\r\n\t\t\tconst cell = document.getElementById(className);\r\n\t\t\tif(cell===null)\r\n\t\t\t\tcontinue;\r\n\t\t\tcell.classList.remove(\"selected\");\r\n\t\t\tcell.classList.remove(\"not-selected\");\r\n\t\t}\r\n\t}\r\n\tmax_row = 0; max_col = 0;\r\n}\r\n\r\n// start부터 end까지 drag 결과(bool) 표시하기\r\nexport const showDragResult = async (bool, type, start, end) => {\r\n\tconst [startPos, endPos] = await setStartAhead(start, end);\r\n\r\n\tif(end[0]>max_row)\r\n\t\tmax_row = end[0];\r\n\tif(end[1]>max_col)\r\n\t\tmax_col = end[1];\r\n\r\n\tlet table_type = \"stillrc\";\r\n\tif(type)\r\n\t\ttable_type = \"rc\";\r\n\r\n\tawait console.log(\"showDragResult: \"+ table_type + \" \" + bool+\"(\"+startPos[0]+\",\"+startPos[1]+\")~(\"+endPos[0]+\",\"+endPos[1]+\")\");\r\n\r\n\tfor(let i=startPos[0]; i<=endPos[0]; i++){\r\n\t\tfor(let j=startPos[1]; j<=endPos[1]; j++){\r\n\t\t\tconst className = table_type+\"/\"+i+\"/\"+j;\r\n\t\t\tconst cell = document.getElementById(className);\r\n\t\t\tif(cell===null)\r\n\t\t\t\tcontinue;\r\n\t\t\tif(bool){ // 체크 해지해야함\r\n\t\t\t\tcell.classList.remove(\"selected\");\r\n\t\t\t\tcell.classList.add(\"not-selected\");\r\n\t\t\t}else{ // 체크해야함\r\n\t\t\t\tcell.classList.add(\"selected\");\r\n\t\t\t\tcell.classList.remove(\"not-selected\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// 원래 표랑 똑같게 만들기\r\nexport const makeOrignal = async (start, end) => {\r\n\tconsole.log(\"makeoriginal\"+\"(\"+start[0]+\",\"+start[1]+\")~(\"+end[0]+\",\"+end[1]+\")\");\r\n\tconst [startPos, endPos] = await setStartAhead(start, end);\r\n\tconsole.log(\"makeoriginal\"+\"(\"+startPos[0]+\",\"+startPos[1]+\")~(\"+endPos[0]+\",\"+endPos[1]+\")\");\r\n\r\n\tfor(let i=startPos[0]; i<=endPos[0]; i++){\r\n\t\tfor(let j=startPos[1]; j<=endPos[1]; j++){\r\n\t\t\tconst original = \"rc/\"+i+\"/\"+j;\r\n\t\t\tconst cell = document.getElementById(\"stillrc/\"+i+\"/\"+j);\r\n\r\n\t\t\tif(cell===null)\r\n\t\t\t\tcontinue;\r\n\t\t\tif(getBool(original)){ // original이랑 똑같이 바꾸기\r\n\t\t\t\tcell.classList.add(\"selected\");\r\n\t\t\t\tcell.classList.remove(\"not-selected\");\r\n\t\t\t}else{\r\n\t\t\t\tcell.classList.remove(\"selected\");\r\n\t\t\t\tcell.classList.add(\"not-selected\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// still 상태일 때 drag 처리\r\nexport const stillDragging = async (bool, start, prev, now) => {\r\n\t// prev보다 now의 좌표가 더 작으면 해당 부분 original로 돌리기\r\n\tconsole.log(\"stillDragging\");\r\n\tconst distrow1 = prev[0]-start[0];\r\n\tconst distrow2 = now[0]-start[0];\r\n\tconst distcol1 = prev[1]-start[1];\r\n\tconst distcol2 = now[1]-start[1];\r\n\r\n\tif(Math.abs(distrow1)<=Math.abs(distrow2)) {\r\n\t\tawait showDragResult(bool, false, start, now);\r\n\t\tif(Math.abs(distcol1)>Math.abs(distcol2)){\r\n\t\t\t// 열이 더 작아졌으면\r\n\t\t\tif(distcol1<0)\r\n\t\t\t\tawait makeOrignal([Number(start[0]), Number(now[1])-1], prev);\r\n\t\t\telse\r\n\t\t\t\tawait makeOrignal([Number(start[0]), Number(now[1])+1], prev);\r\n\t\t}\r\n\t}else{ \r\n\t\t// 행이 더 작아졌으면\r\n\t\tif(distrow1<0)\r\n\t\t\tawait makeOrignal([Number(now[0])-1, Number(start[1])], prev);\r\n\t\telse\r\n\t\t\tawait makeOrignal([Number(now[0])+1, Number(start[1])], prev);\r\n\t\tif(Math.abs(distcol1)>Math.abs(distcol2)){\t// 둘다 작으면\r\n\t\t\tif(distrow1<0)\r\n\t\t\t\tawait makeOrignal(prev, [Number(now[0])-1, Number(now[1])-1]);\r\n\t\t\telse\r\n\t\t\t\tawait makeOrignal(prev, [Number(now[0])+1, Number(now[1])+1]);\r\n\t\t}\r\n\t}\r\n}",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":35,"column":13,"nodeType":"98","messageId":"99","endLine":35,"endColumn":17},{"ruleId":"100","severity":1,"message":"101","line":37,"column":19,"nodeType":"102","messageId":"103","endLine":37,"endColumn":30},{"ruleId":"104","severity":1,"message":"105","line":134,"column":15,"nodeType":"106","endLine":134,"endColumn":56},{"ruleId":"96","severity":1,"message":"107","line":5,"column":8,"nodeType":"98","messageId":"99","endLine":5,"endColumn":13},{"ruleId":"96","severity":1,"message":"108","line":29,"column":15,"nodeType":"98","messageId":"99","endLine":29,"endColumn":22},{"ruleId":"96","severity":1,"message":"109","line":30,"column":21,"nodeType":"98","messageId":"99","endLine":30,"endColumn":32},{"ruleId":"110","severity":1,"message":"111","line":54,"column":33,"nodeType":"106","endLine":54,"endColumn":75},{"ruleId":"96","severity":1,"message":"112","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":25},{"ruleId":"96","severity":1,"message":"113","line":8,"column":76,"nodeType":"98","messageId":"99","endLine":8,"endColumn":86},{"ruleId":"114","severity":1,"message":"115","line":32,"column":5,"nodeType":"116","endLine":32,"endColumn":18,"suggestions":"117"},{"ruleId":"104","severity":1,"message":"105","line":10,"column":7,"nodeType":"106","endLine":10,"endColumn":19},{"ruleId":"92","replacedBy":"118"},{"ruleId":"94","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":40,"column":31,"nodeType":"122","messageId":"123","endLine":40,"endColumn":32},{"ruleId":"120","severity":1,"message":"121","line":85,"column":28,"nodeType":"122","messageId":"123","endLine":85,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":87,"column":28,"nodeType":"122","messageId":"123","endLine":87,"endColumn":29},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'axios' is defined but never used.","'setData' is assigned a value but never used.","'setloggedin' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'useState' is defined but never used.","'Typography' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.data.dates.length'. Either include it or remove the dependency array.","ArrayExpression",["126"],["124"],["125"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},"Update the dependencies array to be: [props.data.dates.length, props.dates]",{"range":"129","text":"130"},[1214,1227],"[props.data.dates.length, props.dates]"]